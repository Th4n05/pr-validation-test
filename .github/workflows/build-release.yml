name: Build all modules

on:
  pull_request:
    types:
      - closed
    branches:
      - master


jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin' # See 'Supported distributions' for available options
          java-version: '21'
      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ secrets.APP_ID}}
          private-key: ${{ secrets.PRIVATE_KEY }}

      - name: Set up Maven
        uses: stCarolas/setup-maven@v4.5
        with:
          maven-version: 3.9.5

      - name: Set up Git user
        run: |
          git config --global user.name 'anis-app[bot]'
          git config --global user.email '121050231+anis-app[bot]@users.noreply.github.com'

      - name: Extract Version Type
        id: extract_version_typei
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          f [[ "$PR_TITLE" =~ upgrade-version-type[[:space:]]*=[[:space:]]*(major|minor|patch) ]]; then
            VERSION_TYPE=${BASH_REMATCH[1]}
            echo "VERSION_TYPE=$VERSION_TYPE" >> $GITHUB_ENV
          fi
      - name: Calculate new version
        id: calculate_new_version
        run: |
          CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          IFS=. read -r -a VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}

          case "$VERSION_TYPE" in
            major)
              NEW_VERSION="$((MAJOR + 1)).0.0"
              NEXT_SNAPSHOT="$((MAJOR + 1)).0.1-SNAPSHOT"
              ;;
            minor)
              NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
              NEXT_SNAPSHOT="$MAJOR.$((MINOR + 1)).1-SNAPSHOT"
              ;;
            patch)
              NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
              NEXT_SNAPSHOT="$MAJOR.$MINOR.$((PATCH + 1))-SNAPSHOT"
              ;;
          esac
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "NEXT_SNAPSHOT=$NEXT_SNAPSHOT" >> $GITHUB_ENV

      - name: release-prepare
        run: |
          #git credential-cache exit
          #export CREDENTIALS=$(echo -n "anis-app:${{ steps.app-token.outputs.token }}" | base64)
          #git config --global "http.https://github.com/.extraheader=AUTHORIZATION: basic $CREDENTIALS"
          export GIT_TRACE=1
          #git config -l
          #git config credential.https://github.com/.helper "! f() { echo username=anis-app; echo password=${{ steps.app-token.outputs.token }}; };f"
          unset GITHUB_TOKEN
          export GITHUB_TOKEN=${{ steps.app-token.outputs.token }}
          export GITHUB_ACTOR=anis-app
          echo $GITHUB_ACTOR  $GITHUB_TOKEN
          mvn --batch-mode release:prepare

      - name: release-perform
        run: mvn --batch-mode release:perform

      - name: release-rollback
        run: mvn -B release:rollback
