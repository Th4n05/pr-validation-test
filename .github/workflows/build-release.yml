name: Build all modules

on:
  pull_request:
    types:
      - closed


jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin' # See 'Supported distributions' for available options
          java-version: '21'
      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ secrets.APP_ID}}
          private-key: ${{ secrets.PRIVATE_KEY }}

      - name: Set up Maven
        uses: stCarolas/setup-maven@v4.5
        with:
          maven-version: 3.9.5

      - name: Set up Git user
        run: |
          git config --global user.name 'anis-app[bot]'
          git config --global user.email '121050231+anis-app[bot]@users.noreply.github.com'

      - name: Extract Version Type
        id: extract_version_type
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          if [[ "$PR_TITLE" =~ upgrade-version-type[[:space:]]*=[[:space:]]*(major|minor|patch) ]]; then
            VERSION_TYPE=${BASH_REMATCH[1]}
            echo "VERSION_TYPE=$VERSION_TYPE" >> $GITHUB_ENV
          fi
      - name: Calculate new version
        id: calculate_new_version
        run: |
          CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
                  IFS=. read -r -a VERSION_PARTS <<< "$CURRENT_VERSION"
                  MAJOR=${VERSION_PARTS[0]}
                  MINOR=${VERSION_PARTS[1]}
                  PATCH=${VERSION_PARTS[2]}

                  case "$VERSION_TYPE" in
                    major)
                      NEW_VERSION="$((MAJOR + 1)).0.0"
                      NEXT_SNAPSHOT="$((MAJOR + 1)).0.1-SNAPSHOT"
                      ;;
                    minor)
                      NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
                      NEXT_SNAPSHOT="$MAJOR.$((MINOR + 1)).1-SNAPSHOT"
                      ;;
                    patch)
                      NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
                      NEXT_SNAPSHOT="$MAJOR.$MINOR.$((PATCH + 1))-SNAPSHOT"
                      ;;
                  esac
                  echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
                  echo "NEXT_SNAPSHOT=$NEXT_SNAPSHOT" >> $GITHUB_ENV
      - name: prepare setting
        uses: whelk-io/maven-settings-xml-action@v22
        env:
          GITHUB_USER: anis-app[bot]
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
        with:
          servers: >
            [
              {
                "id": "github",
                "username": "anis-app",
                "password": "${{ steps.app-token.outputs.token }}"
              }
            ]
          profiles: >
            [
              {
                "id": "github",
                "properties": {
                  "github.username": "anis-app",
                  "github.password": "${{ steps.app-token.outputs.token }}"
                }
              }
            ]
          output_file: ./custom.xml

      - name: dump
        run: cat $GITHUB_WORKSPACE/custom.xml

      - name: release-prepare
        run: |
          git credential-cache exit
          echo $GITHUB_USER  $GITHUB_TOKEN
          git config -l
          mvn -s $GITHUB_WORKSPACE/custom.xml --batch-mode release:prepare

      - name: release-perform
        if: ${{ success() }}
        run: mvn -s $GITHUB_WORKSPACE/custom.xml --batch-mode release:perform

      - name: release-rollback
        if: ${{ failure() }}
        run: mvn -s $GITHUB_WORKSPACE/custom.xml -B release:rollback
